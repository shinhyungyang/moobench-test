name: Build Tests

on:
  workflow_dispatch:
    branches: [main]
  schedule:
    - cron: "0 0 * * *"

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04]
        java: [21]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: Build test on ${{ matrix.os }}
    timeout-minutes: 15
    steps:
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: '3.5.3'

      - uses: actions/setup-go@v4
        with:
          go-version: "stable"

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}

      - name: Checkout the current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_ACCESS }}
          ref: main

      - name: Setup Repo
        run: |
          git config user.name "${{ secrets.OWNER_NAME }}"
          git config user.email "${{ secrets.OWNER_EMAIL }}"
          git config pull.rebase true

      - name: Download the Likwid toolsuite
        run: curl -Lk https://github.com/RRZE-HPC/likwid/archive/refs/tags/v5.4.1.zip -o release.zip

      - name: Extract
        run: unzip release.zip

      - name: Build
        run: |
          cd likwid-5.4.1
          make
          sudo make install

      - name: Print system information
        run: |
          UTC_TIME=$(date -u +"%Y-%m-%dT%H-%M-%S.%NZ")
          OS_NAME=$(awk -F'=' '/^NAME/{name=$2} /^VERSION_ID/{version=$2} END{print substr(name,2,length(name)-2) "_" substr(version,2,length(version)-2)}' /etc/os-release)
          mkdir -p logs
          OUTPUT="${OS_NAME}-${UTC_TIME}.txt"
          uname -a > logs/${OUTPUT}
          likwid-topology -g >> logs/${OUTPUT}
          git add logs/${OUTPUT}
          git commit -m "Added the system information of the current run"
          git pull
          git push -u origin main

      - name: Checkout MooBench Benchmark
        uses: actions/checkout@v4
        with:
          repository: kieker-monitoring/moobench
          ref: main
          path: moobench

      - name: Execute MooBench Benchmark
        run: |
          cd moobench
          git config user.name "${{ secrets.OWNER_NAME }}"
          ./setup.sh
          cd frameworks/Kieker-java/
          export NUM_OF_LOOPS=10 
          export MOOBENCH_CONFIGURATIONS="0 1 2 4"
          ./benchmark.sh 
          cd results-Kieker-java
          unzip results.zip 
          ../../../analysis/getGHActionsFormat.sh &> output.json
          cat output.json
          mv output.json ../../../
